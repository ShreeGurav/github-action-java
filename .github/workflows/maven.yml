name: CI_Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read    

jobs:
  build-and-deploy:

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
      
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Step 3: Build with Maven
    - name: Build with Maven
      run: mvn clean install

    # Step 4: Log in to Azure Container Registry (ACR)
    - name: Log in to ACR
      uses: azure/docker-login@v1
      with:
        login-server: globalgithubaction.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # Step 5: Build and Push Docker Image
    - name: Build and Push Docker Image
      run: |
        docker build . -t globalgithubaction.azurecr.io/myapp:${{ github.sha }}
        docker push globalgithubaction.azurecr.io/myapp:${{ github.sha }}
        az acr repository list --name globalgithubaction.azurecr.io --output table
        az acr repository show-tags --name globalgithubaction.azurecr.io --repository myapp --output table

    # Step 6: Set up AKS credentials
    # - name: Azure Login
    #   uses: azure/login@v1
    #   with:
    #      client-id: ${{ secrets.AZURE_CLIENT_ID }}
    #      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # - name: Set up AKS credentials
    #   run: az aks get-credentials --resource-group ag-acr-githubsction --name aks-github-action --overwrite-existing


    # # Step 7: Deploy to AKS
    # - name: Deploy to AKS
    #   run: |
    #     kubectl apply -f deployment.yaml
    #     kubectl set image deployment/myapp-deployment myapp-container=globalgithubaction.azurecr.io/myapp:${{ github.sha }}
